# INPUT pair potential params
variable A equal 32580.3
variable B equal -25848.1
variable k1 equal 13.1579
variable k2 equal 12.5
variable Ak1 equal $A*${k1}
variable Bk2 equal $B*${k2}

# INPUT simulation params
variable viscosity equal 8.9e-4 #Pa.s,8.9e-4 water, 1.1e-3 EtOH, 2e-3 IPA
variable diam equal 4.82 # particle diameter
variable density equal 2000 #kg/m^3, 2000 silica, 1000 PS

# other params (don't change)
variable kB equal 1.38065e-23
variable T equal 300
variable epsilon equal ${kB}*$T
variable sigma equal 1e-6 #micron
variable pmass equal (4/3*PI*(${diam}/2*${sigma})^3)*${density}
variable tau equal sqrt(${pmass}/${epsilon})*${sigma}
variable ts equal 0.005 
variable second equal round(1/${tau}/${ts}) #number of timesteps in a second
print "second = ${second}"
variable 10secs equal 10*${second}
variable 40min equal 40*60*${second}
variable nu equal ${viscosity}*(${sigma}^3)/(${epsilon}*${tau})
variable gamma equal round(3*PI*${nu}*${diam})
print "gamma = ${gamma}"
variable gamma2 equal round(${gamma}/3)

# Initialization
units		lj
dimension 	2
atom_style	hybrid sphere dipole
boundary        p p p
neighbor        0.5 bin
neigh_modify    every 1 delay 0 check yes

#temperature (in reduced units)
variable temp   equal 1.0

# System definition
read_data example_data_file.txt

pair_style yukawacustom2 ${k1} ${k2} 0.6 25.0 #0.6 is the Hamaker constant, set to 0 for 0vdw
pair_coeff 1 1 ${Ak1} ${Bk2} 
pair_write 1 1 1000 r 0.01 5.0 pair.txt pairpot

#minimize energy first to avoid overlapping particles
thermo 10
minimize 1e-4 1e-4 1000 1000
reset_timestep 0

#velocity       all create 1.0 4928459 dist gaussian

fix dynamics all brownian/sphere 1.0 12908410 gamma_t ${gamma} gamma_r ${gamma2}
fix 2d  all enforce2d #keep z zero

#sample radial distribution function g(r) and save it to lj.rdf
#the 100 100 10000 means sample every 100 steps, make 100 of such samples, and save at 10000 steps
compute rdf all rdf 500
variable sample equal round(${second}) #make a g(r) every second 
variable save equal ${sample}*60
fix saverdf all ave/time ${sample} 60 ${save} c_rdf[1] c_rdf[2] file lj.rdf mode vector


#calculation of msd and D
compute	msd all msd com yes
fix		msd all ave/time 1 1 ${10secs} c_msd[4] file msddumpfile
#variable       twopoint equal c_msd[4]/4/(step*dt+1.0e-6)
#fix            9 all vector ${10secs} c_msd[4] #use global value as input every few timesteps
#variable       fitslope equal slope(f_9)/4/($second*10*dt)

variable fps equal round(${second}/1)
dump           mydmp all custom ${fps} brownian.lammpstrj id type x y z radius mass # 1frames per second

thermo_style custom step temp ke pe etotal c_msd[4]
thermo         ${10secs} #every 10 secs
thermo_modify flush yes

#time step of integrator
timestep	${ts}

#number of integration steps to run
run		${40min}

write_restart restart.run1
